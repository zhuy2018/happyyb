var map;//地图
var radiusvalue = 26;//热力图的每个点的半径大小
var maxvalue = 330;
var rlzsheatmapOverlay;
var data_jqsk =[];//地图上播放景区实况信息
var timer;//当前时间 用全局便于后面销毁

jQuery(function($){
	changeDataJqsk(jqsk);//景区实时人数 高峰人数信息
	viewMap();//地图
	rlzsCurrHeat();//热力图
	setInterval("bfrlzsCurrHeat()",5*60*1000);//每5分钟更新一下热力(图)指数
	setInterval("getCurrJqsk()",1*60*1000);//每1分钟更新一下景区游客人数信息
	//当前时间
	nowTime();
	$('#startTime').val(year + "/"+month+ "/" + day);
	$('#endTime').val(year + "/"+month+ "/" + day);
	if(!timer){
		timer = setInterval(nowTime,1000);
	}
})

//初始化地图(热力图)
function viewMap(){
	map = new BMap.Map("relitu",{enableMapClick:false,minZoom:8,maxZoom:16});    // 创建Map实例
	map.centerAndZoom(new BMap.Point(119.403359,30.182688), 12);  // 初始化地图,设置中心点坐标和地图级别 119.720458,30.240496
	map.enableScrollWheelZoom(true);//开启鼠标滚轮缩放
	map.setMapStyle({styleJson:mapsty});
//	map.setMapStyle({style:'dark'});//地图背景及道路均呈黑灰色  dark
	setTimeout("showJqsk()",2000); 
}

//===================================景区实时人数 高峰人数
//景区游客人数信息
function getCurrJqsk(){
	$.ajax({
		type:"post",
		url:"thermodynamics/show/queryCurrData.do",
		data:{
			scenesClass:scenesClass
		},
		timeout: 10000,
		dataType: "json",
		success:function(data,textStatus) {
			var jqsk = data;
			changeDataJqsk(jqsk);
			showJqsk();
		}
	});
}
// 景区数据
function changeDataJqsk(jqsk){
	data_jqsk=[];
	$.each(jqsk,function(n,value) {
		var dataPointTemp = [];
		dataPointTemp.push(value.longitude);//0 经度
		dataPointTemp.push(value.latitude);//1纬度
		dataPointTemp.push(value.scenesName);//2景区名称
		//dataPointTemp.push(value.oindex);//3 负氧离子
		dataPointTemp.push(value.counts);//3景区人数
		dataPointTemp.push(value.gfCounts == 0? value.counts :value.gfCounts);//4 高峰人数
		data_jqsk.push(dataPointTemp);
	});
}

var markerArr = new Array();
//景区实时人数 高峰人数提示框
function showJqsk(){
	removeAllMarker();
	var myIcon = new BMap.Icon("img/relitu/qcpoint.png", new BMap.Size(30, 47), {  
        offset: new BMap.Size(0, 0), // 指定定位位置  
        imageOffset: new BMap.Size(0, 0) // 设置图片偏移  
    }); 
	
	for(var i=0;i<data_jqsk.length;i++){
		var marker = new BMap.Marker(new BMap.Point(data_jqsk[i][0],data_jqsk[i][1]),{icon:myIcon});  // 创建标注
		/*var lab = new BMap.Label('<div style="width:150px;height:51px;background:url(img/relitu/label_bg.png) no-repeat;color:#fff;text-align:center;line-height:35px;background-size:100% 100%;">'+
				data_jqsk[i][2]+'</div>',{position : new BMap.Point(data_jqsk[i][0],data_jqsk[i][1]),offset:new BMap.Size(-23,-60)});
		lab.setStyle({
			color : "#0066FF", 
			fontSize : "14px", 
			backgroundColor :"0.5",
			border :"5", 
		});*/
		//显示地点
		var label = new BMap.Label('<div style="width:200px;height:130px;background:url(img/relitu/tool_bg.png) no-repeat;background-size:100% 100%;color:#fff;">'+
				'<p style="font-size:18px;line-height:40px;text-align:center;">'+data_jqsk[i][2]+'</p>'+
//				'<div style="width:122px;height:77px;background:url(img/relitu/fu_o.png) no-repeat;margin:4px auto 0;">'+
				//'<p style="width:65px;height:21px;font-size:21px;line-height:21px;padding:29px 0px 0 53px;text-align:center;">'+data_jqsk[i][3]+'</p>'+
//				'</div>'+
				'<p style="text-align:center;line-height:26px;font-size:14px;margin-top:5px;">实时人数<span style="font-size:18px;margin-left:6px;">'+data_jqsk[i][3]+'</span>人</p>'+
				'<p style="text-align:center;line-height:26px;font-size:14px;">高峰人数<span style="font-size:18px;margin-left:6px;">'+data_jqsk[i][4]+'</span>人</p>'+
				'</div>',{offset:new BMap.Size(-91,-130)});//-40,-185
		label.setStyle({
			color : "#0066FF", 
			fontSize : "20px", 
			backgroundColor :"0.5",
			border :"5", 
			fontWeight :"bold"
		});
		addClickHandler(label,marker/*,lab*/);
		// 将标注添加到地图中
//		map.addOverlay(lab);
		map.addOverlay(marker);
		markerArr.push(marker);
	}
}

//移除所有标注
function removeAllMarker(){//TODO
	for(var i=0;i<markerArr.length;i++){
		map.removeOverlay(markerArr[i]);
	}
	markerArr = new Array();
}

//标注效果
function addClickHandler(label,marker,lab){
	marker.addEventListener("mouseover", function(){
		marker.setTop(true);
		marker.setLabel(label);
	});
	marker.addEventListener("mouseout",function(e){
		marker.setTop(false);
		marker.getLabel().remove();
     });
}

//===================================热力图
//热力(图)指数
function rlzsCurrHeat(areaid){
	$.ajax({
		type:"post",
		url:"thermodynamics/show/queryAreaCurrHeat.do",
		data:{
			areaid:areaid
		},
		timeout: 10000,
		dataType: "json",
		success:function(data,textStatus) {
			/*if(rlzsheatmapOverlay){
				map.removeOverlay(rlzsheatmapOverlay);
			}*/
			var result = data.result;
			var points = [];
			for(var i = 0;i < result.length;i++){
				points.push({"lng":result[i].lng,"lat":result[i].lat,"count":Number(result[i].density)});
			}
			if(result.length > 0){
				$("#playtime").html(result[0].kpidate);
			}
			
			if(!rlzsheatmapOverlay){
				rlzsheatmapOverlay = new BMapLib.HeatmapOverlay({"radius":radiusvalue});
				map.addOverlay(rlzsheatmapOverlay);
			}
			rlzsheatmapOverlay.setDataSet({data:points,max:maxvalue});
		}
	});
}

//热力指数
function bfrlzsCurrHeat(){
	rlzsCurrHeat();
}

var playflag = false;//当前显示的是播放按钮还是暂停按钮   false为播放
var pauseflag = false;//是否为中途暂停
var playindex = 0;//播放到对应时刻位置
var timer2;//播放轮训
var start;//开始播放日期
//获取播放热点数据
function playmoredate(){
	if(playflag){
		playstop();
		pauseflag = true;//中途暂停
	}else{
		start = starttime.split(' ')[0];
		if(!pauseflag){
			var endtime = getEndTime();
			$.ajax({
				type:"post",
				url:"thermodynamics/show/queryAreaHeatLs.do",
				data:{
					starttime:starttime,
					endtime:endtime
				},
				timeout: 10000,
				dataType: "json",
				success:function(data,textStatus) {
					starttime = endtime;
					playindex = 0;
					playdata = data.result;
					clearInterval(timer);
					timer2 = setInterval(circlePlace,1500);
					$("#playBtn").removeClass("pause").addClass("play");
					playflag = true;
					nextMoreData();
				}
			});
		}else{
			clearInterval(timer);
			timer2 = setInterval(circlePlace,1500);
			$("#playBtn").removeClass("pause").addClass("play");
			playflag = true;
		}
		pauseflag = false;
	}
}

//获取更多播放热点数据
function nextMoreData(){
	var endtime = getEndTime();
	$.ajax({
		type:"post",
		url:"thermodynamics/show/queryAreaHeatLs.do",
		data:{
			//areaid:selectAreaid,
			starttime:starttime,
			endtime:endtime
		},
		timeout: 10000,
		dataType: "json",
		success:function(data,textStatus) {
			playdata2 = data.result;
		}
	});
	starttime = endtime;
}

function moreData(){
	var endtime = getEndTime();
	$.ajax({
		type:"post",
		url:"thermodynamics/show/queryAreaHeatLs.do",
		data:{
			starttime:starttime,
			endtime:endtime
		},
		timeout: 10000,
		dataType: "json",
		success:function(data,textStatus) {
			starttime = endtime;
			playindex = 0;
			playdata = data.result;
			nextMoreData();
		}
	});
}

var playdata = []; //热点数据集
var playdata2 = []; //下次数据取数  当到playdata.length的时候  将playdata2 赋值给 playdata 
var playhourdata = []; //拖动小时数据
//获取播放数据 并展示
function getPlayData(ctime){
	/*if(rlzsheatmapOverlay){
		map.removeOverlay(rlzsheatmapOverlay);
	}*/
	var points = [];
	var temp = ctime.split(' ')[1].split(':');
	var temphour = Number(temp[0]);
	var tempm = Number(temp[1]);
	
	var temptime = sliderStopTime + ":00";
	var tempflag = compareTime(ctime + ":00", temptime)/60;
	
//	if(sliderStopTime != ctime && tempm == 0 && temphour != 0 && temphour%hourflag == 0){//每3小时加载切换下队列 加载下 个时间段的数据 
	if(sliderStopTime != ctime && tempm == 0 && temphour != 0 && tempflag%hourflag == 0){//每3小时加载切换下队列 加载下 个时间段的数据 
		playindex = 0;
		playdata.length = 0;
		playdata = playdata2;
		setTimeout(function(){
			nextMoreData();
		},100);
	}else if(playflag && !pauseflag && sliderFlag  && sliderStopTime == ctime && temptime != tempStarttime){
		starttime = temptime;
		moreData();
	}
	
	var loopflag = false;
	for(var i = 0;i < playdata.length;i++){
		if(playdata[i].kpitime == ctime){
			points.push({"lng":playdata[i].lng,"lat":playdata[i].lat,"count":Number(playdata[i].density)});
			playindex ++;
			if(!loopflag)
			loopflag = true;
		}else{
			if(loopflag)
				break;
		}
		
	}
	if(points.length > 0){
		if(!rlzsheatmapOverlay){
			rlzsheatmapOverlay = new BMapLib.HeatmapOverlay({"radius":radiusvalue});
			map.addOverlay(rlzsheatmapOverlay);
		}
		rlzsheatmapOverlay.setDataSet({data:points,max:maxvalue});
	}
}

//拖动小时数据
function hourData(starttime, endtime){
	$.ajax({
		type:"post",
		url:"thermodynamics/show/queryAreaHeatHourLs.do",
		data:{
			starttime:starttime,
			endtime:endtime
		},
		timeout: 10000,
		dataType:"json",
		success:function(data,textStatus){
			playhourdata = data.result;
			showbarBot();
		}
	});
}

function setPlayData(ctime){
	var points = [];
	$.each(playhourdata,function(i,mess) {
		if(mess.kpitime == ctime){
			points.push({"lng":mess.lng,"lat":mess.lat,"count":Number(mess.density)});
			playindex ++;
		}
	});
	if(points.length > 0){
		if(!rlzsheatmapOverlay){
			rlzsheatmapOverlay = new BMapLib.HeatmapOverlay({"radius":radiusvalue});
			map.addOverlay(rlzsheatmapOverlay);
		}
		rlzsheatmapOverlay.setDataSet({data:points,max:maxvalue});
	}
}

//当前时间
var localTime,year,month,day,hour,minute,second,totalTime;
function nowTime(){
	localTime = new Date();
	year = localTime.getFullYear();
	month = localTime.getMonth() + 1;
	month>=10 ? month=month : month="0"+month;
	day = localTime.getDate();
	day>=10 ? day=day : day="0"+day;
	hour = localTime.getHours();
	hour>=10 ? hour=hour : hour="0"+hour;
	minute = localTime.getMinutes();
	minute>=10 ? minute=minute : minute="0"+minute;
	second = localTime.getSeconds();
	second>=10 ? second=second : second="0"+second;
	totalTime = " "+year + "/"+month+ "/" + day + "&nbsp;&nbsp;&nbsp;"+ hour + ":" + minute +":" + second;
	$("#timeArea").html(totalTime);
}

var hourAdd = 0,minuteAdd = 0,circleLoca = 0;//播放时间 hourAdd：小时 minuteAdd：分钟 circleLoca：小圆点位置
var curDay = 1;//播放到第几天
//时间条圆点的位置
function circlePlace(){
	if(hourAdd<10){
		hourAdd="0"+hourAdd;
	}
	if(minuteAdd<10){
		minuteAdd="0"+minuteAdd;
	}
	totalTime = " "+start + "&nbsp;&nbsp;&nbsp;"+ hourAdd + ":" + minuteAdd+":00";
	$("#timeArea").html(totalTime);
	$(".xdsoft_range2dslider_runner").css({//小圆点的  位置
		"left":circleLoca
	});
	getPlayData(start+ " "+ hourAdd + ":" + minuteAdd);
	
	if(blueBtn == 2){
		//如果超出当前时间  停止滑动
		if(compareTime(start+ " "+ hourAdd + ":" + minuteAdd + ":00", start+ " "+ hour + ":" + minute + ":00")>0){
			playstop();
			hourAdd = 0;minuteAdd = 0;circleLoca = 0;sliderStopTime = sliderTime+ " 00:00";
			timer = setInterval(nowTime,1000);
			return;
		}
	} else if(blueBtn == 3){
		//如果超出当前时间  停止滑动
		if(hourAdd == 24){
			playstop();
			hourAdd = 0;minuteAdd = 0;circleLoca = 0;sliderStopTime = sliderTime+ " 00:00";
			timer = setInterval(nowTime,1000);
			return;
		}
	} else if(blueBtn == 4){
		if(hourAdd == 24){
			stop();
			if(curDay < timeArray.length){
				starttime = timeArray[curDay]+" 00:00:00";
				sliderTime = timeArray[curDay];
				sliderStopTime = sliderTime+ " 00:00";
				playmoredate();
				curDay ++;
			}else{
				hourAdd = 0;minuteAdd = 0;circleLoca = 0;sliderStopTime = sliderTime+ " 00:00";
				timer = setInterval(nowTime,1000);
				return;
			}
		}
	} else if(blueBtn == 5){
		if(hourAdd == 24){
			stop();
			if(curDay < timeArray.length){
				starttime = timeArray[curDay]+" 00:00:00";
				sliderTime = timeArray[curDay];
				sliderStopTime = sliderTime+ " 00:00";
				playmoredate();
				curDay ++;
			}else{
				hourAdd = 0;minuteAdd = 0;circleLoca = 0;sliderStopTime = sliderTime+ " 00:00";
				timer = setInterval(nowTime,1000);
				return;
			}
		}
	}
	
	minuteAdd = Number(minuteAdd);
	hourAdd = Number(hourAdd);
	minuteAdd+= 10;//每隔10分钟刷新一次热力图
	//小圆点的  位置
	circleLoca+= 8.5;
	//60分钟  小时 +1
	if(minuteAdd == 60){
		hourAdd++;
		minuteAdd = 0;
	}
}

function playstop(){//暂停
	if(playflag){
		$("#playBtn").removeClass("play").addClass("pause");
		clearInterval(timer2);
		playflag = false;
	}
}

function stop(){//回到初始
	playstop();
	pauseflag = false;
	playindex = 0;
	hourAdd = 0;minuteAdd = 0;circleLoca = 0;
	$(".xdsoft_range2dslider_runner").css({//小圆点的  位置
		"left":"0px"
	});
	clearInterval(timer);
	timer = setInterval(nowTime,1000);
}

var sliderTime = '';
var sliderStopTime = '';//拖动结束时间
var sliderFlag = false;//是否拖动
//选择 时间按钮
$(".dayWrap li").click(function(){
	stop();
	$(this).addClass("nowTime").siblings().removeClass("nowTime");
	blueBtn = $(".dayWrap").find(".nowTime").index()+1;
	sliderFlag = false;
	if(blueBtn == 5){
		displayOnclick('timeChoice');
	}else{
		cancel('timeChoice');
	}
	if(blueBtn == 1){
		$(".barBot").css({'display':'none'});
		bfrlzsCurrHeat();
	}else if(blueBtn == 2){
		starttime = getDateStr(0)+" 00:00:00";
		sliderTime = getDateStr(0);
		hourData(sliderTime, sliderTime);
	}else if(blueBtn == 3){
		starttime = getDateStr(-1)+" 00:00:00";
		sliderTime = getDateStr(-1);
		hourData(sliderTime, sliderTime);
	}else if(blueBtn == 4){
		curDay = 1;
		starttime = getDateStr(-7+curDay-1)+" 00:00:00";
		sliderTime = getDateStr(-7+curDay-1);
		hourData(sliderTime, getDateStr(-1));
	}else if(blueBtn == 5){//5.自定义选择时间  弹出时间选择框
		curDay = 1;
		if(st == undefined || st == null || st == ''){
			st = $('#startTime').val();
		}
		if(et == undefined || et == null || et == ''){
			et = $('#endTime').val();
		}
		starttime = st+" 00:00:00";
		sliderTime = st;
		hourData(st, et);
	}
});

function showbarBot(){
	$(".barBot").css({'display':'block'});
	//生成时间轴  
	//.xdsoft_range2dslider_runner 是当前小圆点
	$('#slider').range2DSlider({
		template:'horizontal',
		value:[[0,0]],
		onlyGridPoint:true,
		round:true,
		axis:[[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]],  //0-24时
		printValue:function(val){
			clearInterval(timer);
			sliderFlag = true;//拖动
			
			var hour = val[0][0];
			hourAdd = hour;//小时
			minuteAdd = 0;//分钟
			circleLoca = hour*6*8.5;//小圆点位置
			
			totalTime = " "+sliderTime + "&nbsp;&nbsp;&nbsp;"+ (hourAdd<10? "0"+hourAdd:hourAdd) + ":" + (minuteAdd<10? "0"+minuteAdd:minuteAdd)+":00";
			sliderStopTime = sliderTime+ " "+ (hourAdd<10? "0"+hourAdd:hourAdd) + ":" + (minuteAdd<10? "0"+minuteAdd:minuteAdd);
			
			$("#timeArea").html(totalTime);
			setPlayData(sliderStopTime);
			return hour;
		}
	});
}

var blueBtn;//当前时间按钮的索引
//点击播放按钮
$("#playBtn").click(function(){
	//当前选择的 是哪一个 按钮
	blueBtn = $(".dayWrap").find(".nowTime").index()+1;
	clearInterval(timer);
	
	if(blueBtn == 1){//1.如果是  实时  不播放
		$("#playBtn").removeAttr("disabled"); 
		return;
	} else if(blueBtn == 2){//2.如果是  今日 //TODO
		if(!playflag && !pauseflag){
			starttime = getDateStr(0)+" 00:00:00";
		} else if(sliderFlag && hourAdd != 0){
			starttime = sliderStopTime+":00";
		}
		playmoredate();
	} else if(blueBtn == 3){//3.如果是  昨日
		if(!playflag && !pauseflag){
			starttime = getDateStr(-1)+" 00:00:00";
		} else if(sliderFlag && hourAdd != 0){
			starttime = sliderStopTime+":00";
		}
		playmoredate();
	} else if(blueBtn == 4){//4.如果是  近七天
		if(!playflag && !pauseflag){
			getDate(getDateStr(-7),getDateStr(-1));
			starttime = getDateStr(-7+curDay-1)+" 00:00:00";
		}else if(sliderFlag && hourAdd != 0){//拖动
			starttime = sliderStopTime+":00";
		}
		/*if(pauseflag){//暂停
			starttime = getDateStr(-7+curDay-1)+" 00:00:00";
			sliderTime = getDateStr(-7+curDay-1);
		}*/
		playmoredate();
	} else if(blueBtn == 5){//5.自定义选择时间
		if(st == undefined || st == null || st == ''){
			st = $('#startTime').val();
		}
		if(et == undefined || et == null || et == ''){
			et = $('#endTime').val();
		}
		if(!playflag && !pauseflag){
			starttime = st+" 00:00:00";
			sliderTime = st;
			getDate(st,et);
		}else if(sliderFlag && hourAdd != 0){//拖动
			starttime = sliderStopTime+":00";
		}
		/*if(pauseflag){//暂停
			starttime = getDateStr1(st, curDay-1)+" 00:00:00";
			sliderTime = getDateStr1(st, curDay-1);
		}*/
		playmoredate();
	}
	tempStarttime = starttime;
});

var tempStarttime;
var starttime;    //数据按每3小时 间隔取数据  记录上次开始时间 (15分钟为3小时 因为数据量过大)   yyyy/mm/dd 00:00:00
var hourflag = 3;
function getEndTime(){
	var temp = starttime.split(' ');
	var rq = temp[0].split('/');
	var sj = temp[1].split(':');
	
	var sDate = new Date(rq[0],Number(rq[1])-1,rq[2],sj[0],sj[1],sj[2]); 
	return new Date(sDate.getTime()+(1000*60*60*hourflag)).format("yyyy/MM/dd hh:mm:ss");
}

//获取time时间 dayCount天后/前的日期 
function getDateStr1(time, dayCount) {
	var dd = new Date(time); 
	dd.setDate(dd.getDate()+dayCount);
	var y = dd.getFullYear(); 
	var m = dd.getMonth()+1;//获取当前月份的日期 
	var d = dd.getDate();
	if(m<10){
		m="0"+m;
	}
	if(d<10){
		d="0"+d;
	}
	var ddd = y+"/"+m+"/"+d;
	return ddd; 
}

//获取当前时间 dayCount天后/前的日期 
function getDateStr(dayCount) {
	var dd = new Date(); 
	dd.setDate(dd.getDate()+dayCount);
	var y = dd.getFullYear(); 
	var m = dd.getMonth()+1;//获取当前月份的日期 
	var d = dd.getDate();
	if(m<10){
		m="0"+m;
	}
	if(d<10){
		d="0"+d;
	}
	var ddd = y+"/"+m+"/"+d;
	return ddd; 
}

//String类型日期转化为Date类型日期
function strToDate(datestr){
	var temp = datestr.split("/");
	if(datestr.indexOf("-") > -1){
		temp = datestr.split("-");
	}
	var date = new Date(temp[0],temp[1]-1,temp[2]);
	return date;
}

var timeArray=[];//两个日期之间的所有日期
//获取两个日期之间的所有日期
function getDate(start, end){
	timeArray=[];
	var sTime = strToDate(start);
	var eTime = strToDate(end);
    var unixDst=sTime.getTime();
    var unixDet=eTime.getTime();
    for(var k = unixDst; k <= unixDet;){
    	timeArray.push((new Date(parseInt(k))).format("yyyy/MM/dd"));
	    k = k+24*60*60*1000;
    }
}

//判断日期，时间大小  
function compareTime(startDate, endDate) {   
	if (startDate.length > 0 && endDate.length > 0) {   
	    var startDateTemp = startDate.split(" ");   
	    var endDateTemp = endDate.split(" ");   
	    var arrStartDate = startDateTemp[0].split("/");   
	    var arrEndDate = endDateTemp[0].split("/");   
	    var arrStartTime = startDateTemp[1].split(":");   
	    var arrEndTime = endDateTemp[1].split(":");   
	
		var allStartDate = new Date(arrStartDate[0], arrStartDate[1], arrStartDate[2], arrStartTime[0], arrStartTime[1], arrStartTime[2]);   
		var allEndDate = new Date(arrEndDate[0], arrEndDate[1], arrEndDate[2], arrEndTime[0], arrEndTime[1], arrEndTime[2]);   
		/*if (allStartDate.getTime() >= allEndDate.getTime()) {   
			return false;   
		} else {   
		    return true;   
		}*/
		return (allStartDate.getTime() - allEndDate.getTime())/60/1000;
	} else {   
	    return -1;   
	}   
}   

/** 
 * 时间对象的格式化; 
 */  
Date.prototype.format = function(format) {  
    /* 
     * eg:format="yyyy-MM-dd hh:mm:ss"; 
     */  
    var o = {  
        "M+" : this.getMonth() + 1, // month  
        "d+" : this.getDate(), // day  
        "h+" : this.getHours(), // hour  
        "m+" : this.getMinutes(), // minute  
        "s+" : this.getSeconds(), // second  
        "q+" : Math.floor((this.getMonth() + 3) / 3), // quarter  
        "S" : this.getMilliseconds()  
        // millisecond  
    }  
  
    if (/(y+)/.test(format)) {  
        format = format.replace(RegExp.$1, (this.getFullYear() + "").substr(4  
                        - RegExp.$1.length));  
    }  
  
    for (var k in o) {  
        if (new RegExp("(" + k + ")").test(format)) {  
            format = format.replace(RegExp.$1, RegExp.$1.length == 1  
                            ? o[k]  
                            : ("00" + o[k]).substr(("" + o[k]).length));  
        }  
    }  
    return format;  
}

var mapsty = [ {
	"featureType" : "land",
	"elementType" : "geometry",
	"stylers" : {
		"color" : "#212121"
	}
}, {
	"featureType" : "building",
	"elementType" : "geometry",
	"stylers" : {
		"color" : "#2b2b2b"
	}
}, {
	"featureType" : "highway",
	"elementType" : "all",
	"stylers" : {
		"lightness" : -42,
		"saturation" : -91,
		"color" : "#aaaaaa"

	}
}, {
	"featureType" : "arterial",
	"elementType" : "geometry",
	"stylers" : {
		"lightness" : -77,
		"saturation" : -94
	}
}, {
	"featureType" : "green",
	"elementType" : "geometry",
	"stylers" : {
		"color" : "#1b1b1b"
	}
}, {
	"featureType" : "water",
	"elementType" : "geometry",
	"stylers" : {
		"color" : "#181818"
	}
}, {
	"featureType" : "subway",
	"elementType" : "geometry.stroke",
	"stylers" : {
		"color" : "#181818"
	}
}, {
	"featureType" : "railway",
	"elementType" : "geometry",
	"stylers" : {
		"lightness" : -52
	}
}, {
	"featureType" : "all",
	"elementType" : "labels.text.stroke",
	"stylers" : {
		"color" : "#313131"
	}
}, {
	"featureType" : "all",
	"elementType" : "labels.text.fill",
	"stylers" : {
		"color" : "#8b8787"
	}
}, {
	"featureType" : "manmade",
	"elementType" : "geometry",
	"stylers" : {
		"color" : "#1b1b1b"
	}
}, {
	"featureType" : "local",
	"elementType" : "geometry",
	"stylers" : {
		"lightness" : -75,
		"saturation" : -91
	}
}, {
	"featureType" : "subway",
	"elementType" : "geometry",
	"stylers" : {
		"lightness" : -65
	}
}, {
	"featureType" : "railway",
	"elementType" : "all",
	"stylers" : {
		"lightness" : -40
	}
}, {
	"featureType" : "background",
	"elementType" : "geometry",
	"stylers" : {
		"color" : "#0b0b0b",
		"weight" : "1",
		"lightness" : -29
	}
}, {
	"featureType" : "water",
	"elementType" : "geometry",
	"stylers" : {
		"color" : "#454343",
		"weight" : "1",
		"lightness" : -29
	}
} ];